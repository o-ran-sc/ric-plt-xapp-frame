// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SubscribeReportHandlerFunc turns a function with the right signature into a subscribe report handler
type SubscribeReportHandlerFunc func(SubscribeReportParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SubscribeReportHandlerFunc) Handle(params SubscribeReportParams) middleware.Responder {
	return fn(params)
}

// SubscribeReportHandler interface for that can handle valid subscribe report params
type SubscribeReportHandler interface {
	Handle(SubscribeReportParams) middleware.Responder
}

// NewSubscribeReport creates a new http.Handler for the subscribe report operation
func NewSubscribeReport(ctx *middleware.Context, handler SubscribeReportHandler) *SubscribeReport {
	return &SubscribeReport{Context: ctx, Handler: handler}
}

/*SubscribeReport swagger:route POST /subscriptions/report report subscribeReport

Subscribe a list of X2AP event triggers to receive "REPORT" messages sent by RAN or Subscribe to receive the content of gNB NRT table in REPORT message sent by RAN

*/
type SubscribeReport struct {
	Context *middleware.Context
	Handler SubscribeReportHandler
}

func (o *SubscribeReport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSubscribeReportParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
