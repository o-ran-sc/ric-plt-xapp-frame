// Code generated by go-swagger; DO NOT EDIT.

package clientmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RANUeGroupParams r a n ue group params
// swagger:model RANUeGroupParams
type RANUeGroupParams struct {

	// r a n parameter ID
	// Required: true
	RANParameterID *int64 `json:"RANParameterID"`

	// r a n parameter test condition
	// Enum: [equal greaterthan lessthan contains present]
	RANParameterTestCondition string `json:"RANParameterTestCondition,omitempty"`

	// r a n parameter value
	// Required: true
	RANParameterValue *int64 `json:"RANParameterValue"`
}

// Validate validates this r a n ue group params
func (m *RANUeGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRANParameterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRANParameterTestCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRANParameterValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RANUeGroupParams) validateRANParameterID(formats strfmt.Registry) error {

	if err := validate.Required("RANParameterID", "body", m.RANParameterID); err != nil {
		return err
	}

	return nil
}

var rANUeGroupParamsTypeRANParameterTestConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["equal","greaterthan","lessthan","contains","present"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rANUeGroupParamsTypeRANParameterTestConditionPropEnum = append(rANUeGroupParamsTypeRANParameterTestConditionPropEnum, v)
	}
}

const (

	// RANUeGroupParamsRANParameterTestConditionEqual captures enum value "equal"
	RANUeGroupParamsRANParameterTestConditionEqual string = "equal"

	// RANUeGroupParamsRANParameterTestConditionGreaterthan captures enum value "greaterthan"
	RANUeGroupParamsRANParameterTestConditionGreaterthan string = "greaterthan"

	// RANUeGroupParamsRANParameterTestConditionLessthan captures enum value "lessthan"
	RANUeGroupParamsRANParameterTestConditionLessthan string = "lessthan"

	// RANUeGroupParamsRANParameterTestConditionContains captures enum value "contains"
	RANUeGroupParamsRANParameterTestConditionContains string = "contains"

	// RANUeGroupParamsRANParameterTestConditionPresent captures enum value "present"
	RANUeGroupParamsRANParameterTestConditionPresent string = "present"
)

// prop value enum
func (m *RANUeGroupParams) validateRANParameterTestConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rANUeGroupParamsTypeRANParameterTestConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RANUeGroupParams) validateRANParameterTestCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.RANParameterTestCondition) { // not required
		return nil
	}

	// value enum
	if err := m.validateRANParameterTestConditionEnum("RANParameterTestCondition", "body", m.RANParameterTestCondition); err != nil {
		return err
	}

	return nil
}

func (m *RANUeGroupParams) validateRANParameterValue(formats strfmt.Registry) error {

	if err := validate.Required("RANParameterValue", "body", m.RANParameterValue); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RANUeGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RANUeGroupParams) UnmarshalBinary(b []byte) error {
	var res RANUeGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
