// Code generated by go-swagger; DO NOT EDIT.

package clientmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionDetail subscription detail
// swagger:model SubscriptionDetail
type SubscriptionDetail struct {

	// action to be setup list
	// Required: true
	ActionToBeSetupList ActionsToBeSetup `json:"ActionToBeSetupList"`

	// event triggers
	// Required: true
	EventTriggers *EventTriggerDefinition `json:"EventTriggers"`

	// instance Id
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	InstanceID *int64 `json:"InstanceId"`

	// requestor Id
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	RequestorID *int64 `json:"RequestorId"`
}

// Validate validates this subscription detail
func (m *SubscriptionDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionToBeSetupList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTriggers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionDetail) validateActionToBeSetupList(formats strfmt.Registry) error {

	if err := validate.Required("ActionToBeSetupList", "body", m.ActionToBeSetupList); err != nil {
		return err
	}

	if err := m.ActionToBeSetupList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ActionToBeSetupList")
		}
		return err
	}

	return nil
}

func (m *SubscriptionDetail) validateEventTriggers(formats strfmt.Registry) error {

	if err := validate.Required("EventTriggers", "body", m.EventTriggers); err != nil {
		return err
	}

	if m.EventTriggers != nil {
		if err := m.EventTriggers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EventTriggers")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionDetail) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("InstanceId", "body", m.InstanceID); err != nil {
		return err
	}

	if err := validate.MinimumInt("InstanceId", "body", int64(*m.InstanceID), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("InstanceId", "body", int64(*m.InstanceID), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionDetail) validateRequestorID(formats strfmt.Registry) error {

	if err := validate.Required("RequestorId", "body", m.RequestorID); err != nil {
		return err
	}

	if err := validate.MinimumInt("RequestorId", "body", int64(*m.RequestorID), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("RequestorId", "body", int64(*m.RequestorID), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionDetail) UnmarshalBinary(b []byte) error {
	var res SubscriptionDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
