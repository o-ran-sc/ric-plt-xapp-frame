// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RANUeGroupList r a n ue group list
// swagger:model RANUeGroupList
type RANUeGroupList struct {

	// r a n imperative policy
	// Required: true
	RANImperativePolicy *ImperativePolicyDefinition `json:"RANImperativePolicy"`

	// r a n ue group definition
	// Required: true
	RANUeGroupDefinition *RANUeGroupParams `json:"RANUeGroupDefinition"`

	// r a n ue group ID
	// Required: true
	RANUeGroupID *int64 `json:"RANUeGroupID"`
}

// Validate validates this r a n ue group list
func (m *RANUeGroupList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRANImperativePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRANUeGroupDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRANUeGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RANUeGroupList) validateRANImperativePolicy(formats strfmt.Registry) error {

	if err := validate.Required("RANImperativePolicy", "body", m.RANImperativePolicy); err != nil {
		return err
	}

	if m.RANImperativePolicy != nil {
		if err := m.RANImperativePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RANImperativePolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RANUeGroupList) validateRANUeGroupDefinition(formats strfmt.Registry) error {

	if err := validate.Required("RANUeGroupDefinition", "body", m.RANUeGroupDefinition); err != nil {
		return err
	}

	if m.RANUeGroupDefinition != nil {
		if err := m.RANUeGroupDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RANUeGroupDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *RANUeGroupList) validateRANUeGroupID(formats strfmt.Registry) error {

	if err := validate.Required("RANUeGroupID", "body", m.RANUeGroupID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RANUeGroupList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RANUeGroupList) UnmarshalBinary(b []byte) error {
	var res RANUeGroupList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
